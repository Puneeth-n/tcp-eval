#!/usr/bin/env python
# -*- coding: utf-8 -*-

# python imports
import os, subprocess, dircache, re, copy
from logging import info, debug, warn, error

# umic-mesh imports
from um_application import Application
from um_util import *


class Subversion(Application):   
    "Class to manage Subvserions repositories within those images"  


    def __init__(self):
        Application.__init__(self);

        # object variables (set the defaults for the option parser)
        self.updatelinks = True

        # initialization of the option parser
        usage = "usage: %prog [options] COMMAND \n" \
                "where COMMAND := { status | update }\n"
        self.parser.set_usage(usage)

        self.parser.set_defaults(syslog = False,
                                 verbose = True,
                                 updatelinks = self.updatelinks)

        self.parser.add_option("-n", "--nolinks", 
                               action = "store_false", dest = "updatelinks",
                               help = "don't update symlinks in /usr/local/sbin")    

        # execute object
        self.main()


    def set_option(self):
        "Set options"

        # call the super set_option method
        Application.set_option(self);
        
        # correct numbers of arguments?
        if len(self.args) != 1:
            self.parser.error("incorrect number of arguments")

        # get options
        self.updatelinks = self.options.updatelinks
        self.action = self.args[0]  
    
        # does the command exists?
        if not self.action in ('update', 'status'):
            self.parser.error('unkown COMMAND %s' %(args[0]))

    
    def update(self):
        "Subversion update"

        # allow group mates to write and exec files
        os.umask(0002)
        for image,imageinfo in imageinfos.iteritems():
            svnmappings = imageinfo['svnmappings']
            imagepath = "%s/%s" %(imageprefix, image)

            # iterate through svn mappings
            for src,dst in svnmappings.iteritems(): 
                dst = "%s%s%s" %(imagepath, svnprefix, dst)
                src = "%s%s" %(svnrepos, src)
                if not os.path.exists(dst):
                    warn("%s got lost! doing a new checkout" % dst)
                    call("mkdir -p %s" % dst, shell = True)
                    cmd = ('svn','checkout',src,dst)
                else:
                    cmd = ('svn','update',dst)
                info(cmd)
                prog = call(cmd,shell=False)
                
            # update links
            if self.updatelinks:
                  
                info("Updating symlinks in /usr/local/sbin")
                dst = "%s/usr/local/sbin" % (imagepath)

                # just remove every link with um_ in it
                cmd = "rm -v `find %s -type l -name 'um_*'`" %(dst)
                try:
                    call(cmd,shell=True)
                except CommandFailed:
                    warn("Removing of links in %s failed" %(dst))
                    # recreate those links

                for d in imageinfo['scriptfolders']:
                    src = "%s%s/%s" %(imagepath, svnprefix, d)
                    info(src);
                    d = "%s%s" %(svnprefix,d)
                    for f in dircache.listdir(src):
                        if re.match("um_",f):
                            cmd = "ln -vsf %s/%s %s/%s" %(d, f, dst, f)
                            # use os.system() here because call()
                            # is too slow
                            os.system(cmd) 
                     
    

    def status(self):
        "Subversion status"
        
        for image,imageinfo in imageinfos.iteritems():
            imagepath = "%s/%s" %(imageprefix, image)
    
            for src,dst in imageinfo['svnmappings'].iteritems():
                dst = "%s%s%s" %(imagepath, svnprefix, dst)
                cmd = ('svn','status', dst)
                info(cmd)
                prog = call(cmd, shell = False)

    
    def main(self):
        "Main method of subversion object"
        
        # parse options
        self.parse_option()
        
        # set options
        self.set_option()
        
        # call the corresponding method
        eval("self.%s()" %(self.action)) 



if __name__ == '__main__':
    Subversion()
