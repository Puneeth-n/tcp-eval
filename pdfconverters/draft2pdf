#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vi:et:sw=4 ts=4

# Copyright (C) 2009 - 2013 Alexander Zimmermann <alexander.zimmermann@netapp.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# python imports
import os.path
import textwrap
from logging import info, debug, warn, error

# tcp-eval imports
from application import Application
from functions import call, execute

class Draft2Pdf(Application):
    """Class to convert internet draft text files to pdfs"""

    def __init__(self):
        """Constructor of the object"""

        # initialization of the option parser
        description = textwrap.dedent("""\
                Convert Internet Draft text files to PDFs""")
        Application.__init__(self, description=description)
        self.parser.add_argument("-f", "--force", action="store_true",
                help="overwrite existing output pdf file")
        self.parser.add_argument("-d", "--directory", metavar="DIR",
                action="store", dest="outdir", default="./",
                help="output directory (default: %(default)s)")
        self.parser.add_argument("files", nargs="+", help="Internet Draft "\
                "text files")

    def set_option(self):
        """Configure Draft2pdf object based on the options form the
        argparser"""

        Application.apply_options(self)


    def run(self):
        """Main method of the Draft2Pdf object"""

        # get all necessary directories
        srcdir = os.getcwd()
        destdir = self.args.outdir

	    # for all ID given on command line
        for index, draft in enumerate(self.args.files):

            # get the full path of the figure
            draftSrc = os.path.join(srcdir, draft)

            if not os.path.isfile(draftSrc):
                warn("%s is not a regular file. Skipped." %draft)
                continue

            # get the basename (without extension)
            basename = os.path.basename(draft)
            basename = os.path.splitext(basename)[0]

            # build name for output file
            draftDst = os.path.join(destdir, "%s.pdf" %basename)

            if not self.args.force and os.path.exists(draftDst):
                warn("%s already exists. Skipped." %draftDst)
                continue

            # convert the draft to a PS file
            if self.args.debug:
                cmd = ("enscript -v -B -f Courier10 --margins=70::50 %s -p -"\
                        %(draftSrc))
            else:
                cmd = ("enscript -B -f Courier10 --margins=70::50 %s -p -"\
                        %(draftSrc))

            # we want only stdout
            info("Run enscript on %s..." %draft)
            enscript = execute(cmd)[0]

            # convert the PS file to a PDF file
            info("Run ps2pdf on %s..." %draft)
            cmd = ("ps2pdf - %s" %draftDst)
            if self.args.debug:
                call(cmd, input=enscript)
            else:
                call(cmd, input=enscript, noOutput=True)

    def main(self):
        self.parse_options()
        self.apply_options()
        self.run()


if __name__ == "__main__":
    Draft2Pdf().main()

